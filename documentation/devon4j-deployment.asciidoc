:toc: macro
toc::[]
:idprefix:
:idseparator: -
ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

= Deployment of devon4j Applications
As mentioned already in the xref:an-devon4j-application#the-devon4j-project[devon4j project section], apart from the _core_ and _api_ project, apps created with _devon4j_ also provide a _server_ project that configures the packaging of the app. 

In our _JumpTheQueue_ app we can verify that this _server_ project is available:

image::images/devon4j/9.Deployment/jumpthequeue_server_structure.png[JumpTheQueue Server Structure, 250]

So -- using _Maven_ -- we are going to be able to easily package our app in a `.war` file to be deployed in an application server like _Tomcat_ (the default server provided in devonfw).

== The _server_ Project
The _server_ project provided in _devon4j_ applications is an almost empty _Maven_ project. It only has a `pom.xml` file that is used to configure the packaging of the _core_ project. Taking a closer look at this `pom.xml` file, we realize that it only contains a single dependency to the core project:

[source,xml]
----
...

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>jtqj-core</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>

...
----

It also includes the https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html[Spring Boot Maven Plugin], that allows us to package the project in `.jar` or `.war` archives and run the application "in-place":

[source,xml]
----
...

    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        ...

      </plugin>
    </plugins>

...
----

== Disabling Security Tests
First -- since this is a basic tutorial and there is no security or permission handling -- the files `SecurityRestServiceImplTest` and the `PermissionCheckTest` need to be modified, leaving one test for each that will succeed while commenting out the rest of the tests. First, in `jtqj-core` inside `src/test/java/.../general/service/impl/rest/SecurityRestServiceImplTest.java`:

[source, java]
----
...

@ExtendWith(SpringExtension.class)
public class SecurityRestServiceImplTest extends RestServiceTest {

  ...
  
  @Test
  public void testLogin() {

    assertThat(true);

    /*
    String login = "waiter";
    String password = "waiter";

    ResponseEntity<String> postResponse = login(login, password);
    LOG.debug("Body: " + postResponse.getBody());
    assertThat(postResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
    assertThat(postResponse.getHeaders().containsKey(HttpHeaders.SET_COOKIE)).isTrue();
    */
  }

  ...

  /*
  @Test
  public void testGetCsrfToken() {
    ...
  }
  */

  ...

  /*
  @Test
  public void testGetCurrentUser() {
    ...
  }
  */

  ...
  
  /*
  private ResponseEntity<String> login(String userName, String tmpPassword) {
    ...
  }
  */

}
----

And inside `src/test/java/.../general/common/base/PermissionCheckTest.java`:

[source, java]
----
...

public class PermissionCheckTest extends ModuleTest {

  ...

  @Test
  public void permissionCheckAnnotationPresent() {
    
    assertThat(true);
    
    /*
    String packageName = "com.devonfw.application.jtqj";
    Filter<String> filter = new Filter<String>() {

      @Override
      public boolean accept(String value) {

        return value.contains(".logic.impl.usecase.Uc") && value.endsWith("Impl");
      }

    };

    ...

    assertions.assertAll();
    */

  }
}
----

This is going to allow our application to pass the tests and be built.

== Running the App with Maven
Thanks to _Spring Boot_ and the _Spring Boot Maven Plugin_, we can run our app using Maven. To do so, just open a command prompt with access to _Maven_ (in our devonfw project folder we can simply do so by right clicking and selecting `Open Devon CMD shell here`).

Now we need to follow these steps:

1.- As is explained in the https://github.com/devonfw/devon4j/wiki/guide-configuration#environment-configuration[devon4j configuration guide], the default `application.properties` file used for packaging is located in `src/main/resources/` (*don't* use the one located in `src/main/resources/config/`). We need to modify some settings in this file in order to gain access to the app: +

----
server.port=8081

spring.application.name=jtqj
server.servlet.context-path=/jumpthequeue
----

2.- Install the `jtqj` project in our local _Maven_ repository:

----
C:\...\workspaces\main\jumpthequeue\java\jtqj> mvn install
----

//TODO: Step 2 is not working currently. Continue here when fixed!

3.- Go to the `jtqj/server` project and boot the application:

----
C:\...\workspaces\main\jumpthequeue\java\jtqj\server> mvn spring-boot:run
----

The app should be launched in the _Spring Boot_ embedded _Tomcat_ server. Wait a few seconds until you see a console message like this:

----
{"timestamp":"2019-01-30T14:13:10.164+00:00","message":"Tomcat started on port(s): 8081 (http) with context path '/jumpthequeue'","logger_name":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer","thread_name":"main","level":"INFO","appname":"jtqj"}
----

Now we can try to access the app resource.

Open https://www.getpostman.com/[Postman], select the service *GET* and send: +
`http://localhost:8081/jumpthequeue/services/rest/visitormanagement/v1/visitor/1`

image::images/devon4j/9.Deployment/jumpthequeue_simpleget1.png[JumpTheQueue Simple GET Request]

If you get a response similar to the one in the image, you have verified that the app is running fine.

== Packaging the App with Maven
In the same way, using _Maven_ we can package our project in a `.war` file. As in the previous section, open a command prompt with access to _Maven_ (in our devonfw project folder we can simply do so by right clicking and selecting `Open Devon CMD shell here`). Now execute the following command in the projects root directory:

----
C:\...\workspaces\main\jumpthequeue\java\jtqj> mvn clean package
----

The packaging process (compilation, tests and generation of the `.war` file) will be launched. Once the process is finished you should see a result like this:

----
[INFO] Building war: C:\Devon-dist_3.0.0\jump-the-queue\java\jtqj\server\target\jtqj-server-v4.war
[INFO]
[INFO] --- spring-boot-maven-plugin:2.0.4.RELEASE:repackage (default) @ jtqj-server ---
[INFO] Attaching archive: C:\...\jump-the-queue\java\jtqj\server\target\jtqj-server-bootified.war, with classifier: bootified
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for jtqj v4:
[INFO]
[INFO] jtqj ............................................... SUCCESS [  2.582 s]
[INFO] jtqj-api ........................................... SUCCESS [  6.725 s]
[INFO] jtqj-core .......................................... SUCCESS [01:19 min]
[INFO] jtqj-server ........................................ SUCCESS [ 10.308 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
----

The packaging process creates a `.war` file that is stored in the `\java\jtqj\server\target` directory. It contains the web application and can be deployed on any Servlet/JSP container.

'''
*Next Chapter*: link:devon4ng-introduction.asciidoc[devon4ng Introduction]