:toc: macro
toc::[]
:idprefix:
:idseparator: -
ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

= Build your own devon4ng Application

In this chapter we are going to see how to build a new devon4ng from scratch. The proposal of this tutorial is to end having enough knowledge of Angular and the of the remaining technologies regarding devon4ng to know how to start developing. If you need more advanced and specific functionalities, you can find them on the cookbook.

== Goal of JumpTheQueue

These mock-ups show what you can expect to see after you finished this tutorial. It will be an App to manage codes assigned to people attending a queue in order to ease the management of the queue. With a code, you can jump between positions in the queue and you will be able to keep track of your position.

image::images/devon4ng/3.BuildYourOwn/mockups.png[JumpTheQueue Mock-Ups, 500]

So, hands on it: Let's configure the environment and build this app!

== Setting up the devonfw Tools (recommended)

We will be utilizing Node.js, npm and Yarn to create our Angular front end. Using these tools from inside a devonfw environment avoids a manual download/installation, and keeps the tools isolated from other projects. Like this, we don't run into version conflicts down the road.

These tools should already be located inside your devonfw environment. However, to make sure they are present and up-to-date, execute the following commands inside the `C:/.../workspaces/main/jumpthequeue` directory:

----
devon node setup

devon yarn setup

devon ng setup
----

== Installing Global Tools (optional)

[WARNING]
====
If you are using a devonfw work environment -- as instructed in the https://github.com/devonfw/jump-the-queue/wiki/build-devon4j-application#setting-up-a-devonfw-work-environment[devon4j] part of this tutorial -- you *DON'T* have to install these tools globally, since they can be accessed from the devon CLI. +
A global installation is only useful if you want to create Angular projects _outside_ of a devonfw environment. In that case you can use the same commands listed on this page, without the initial `devon` keyword in front of them.
====

=== Visual Studio Code

To install the editor, download the installer from the https://code.visualstudio.com/Download[official page] and install it.

Once installed, the first thing you should do is install the extensions that will help you during the development. To do that, follow these steps:

1. Go to the _Extensions_ panel in VS Code and search for "devonfw" on the market place.

2. Install the `devonfw Platform Extension Pack` (this might take a while).

=== Node.js

Go to https://nodejs.org/en/[nodejs.org] and download the version you like the most -- LTS or Current -- as you wish.

The recommendation is to install the latest version, but keep in mind that to use Angular CLI, your version must be at least 8.x and to use npm at least 5.x. If you have Node.js already installed on your computer, this is a good moment to check your version and upgrade if necessary.

=== TypeScript

Let’s install what is going to be the main language during development: TypeScript. This ES6 superset is tightly coupled to the Angular framework and will help us to get a final clean and distributable JavaScript code. This is installed globally with npm, the package manager used to install and create JavaScript modules in Node.js, that is installed along with Node. To install TypeScript, you don’t have to install npm explicitly, just run this command:

----
npm install –g typescript
----

=== Yarn

Just like npm, https://yarnpkg.com/en/[Yarn] is a package manager for JavaScript/Node modules. Yarn is quite a bit faster and more usable in our opinion, so we decided to use it to manage the dependencies of devon4ng projects.

To install Yarn, you only have to go to the official https://yarnpkg.com/en/docs/install[installation page] and follow the instructions.

However, if you feel more comfortable with npm, you can keep using it.

=== Angular/CLI

This CLI is specifically built to make Angular projects easier to develop, maintain and deploy, so we are going to make use of it.

To install the Angular/CLI, you have to run this command in your console prompt:

----
npm install –g @angular/cli
----

Now you should be able to run `ng version` and this will appear in the console:

image::images/devon4ng/3.BuildYourOwn/angularcli.png[Angular CLI Version]

In addition, you can set Yarn as the default package manager to use with Angular/CLI by running this command: 

----
ng config -g cli.packageManager yarn
----

Finally, once all these tools have been installed successfully, you are ready to create a new project.

== Creating a New Project with the Angular/CLI

One of the main reasons to use Angular/CLI is its feature to create a whole new basic project by simply running:

----
C:\...\workspaces\main\jumpthequeue> devon ng create <project name>
----

Where <project name> is the name of the Angular project you want to create. In this case, we are going to call it `angular` itself, since we want to distribute this code as part of our complete `jumpthequeue` project. After executing the command, Angular/CLI will ask, if we want to use Angular routing (Yes) and what stylesheet format we want to use (SCSS):

image::images/devon4ng/3.BuildYourOwn/ngnewoptions.png[Angular Options]

This command will create the basic files, directories, and install  the dependencies stored in `package.json`:

image::images/devon4ng/3.BuildYourOwn/ngnew.png[Angular Project Creation]

After project creation, navigate into the `angular` folder and execute the following command to set Yarn as our default package manager for this project:

----
devon ng config cli.packageManager yarn
----

Now install/check the required dependencies with Yarn by executing:

----
devon yarn install
----

Now run `vscode-main.bat` to start the VS Code instance for the main workspace and expand the `jumpthequeue/angular` folder, i.e. the project we have just created. It should look like this:

image::images/devon4ng/3.BuildYourOwn/filesnew.png[Angular New Project Files]

Finally, it is time to check if the created project works properly. To do this, move to the project's root folder (`C:/.../workspaces/main/jumpthequeue/angular`) and run:

----
devon ng serve -o
----

If everything worked, you'll see the default Angular landing page:

image::images/devon4ng/3.BuildYourOwn/appnew.png[Angular Default Page]

=== Adding Google Material and Covalent Teradata

[NOTE]
====
If you don't have the latest Angular version, install the corresponding version of dependencies for your Angular version by adding `@<version>` behind the dependency names, for example: `npm install @angular/material@7.1.2` or `yarn add @angular/material@7.1.2`. +
This will mostly be the case when using global tools that haven't been updated for a while. So if you're using a fresh install or the devonfw environment, this shouldn't be a problem.
====

Go to the `C:/.../workspaces/main/jumpthequeue/angular` directory and run the following command to add *Google Material* to the project dependencies:

----
devon yarn add @angular/material
----

Now we are going to add the *Angular CDK* (Component Dev Kit):

----
devon yarn add @angular/cdk
----

Then we are going to add *Animations*:

----
devon yarn add @angular/animations
----

The Angular animations library implements a domain-specific language (DSL) for defining web animation sequences for HTML elements as multiple transformations over time. Finally, some material components need gestures support, so we need to add this dependency:

----
devon yarn add hammerjs
----

That is all regarding Angular/Material. We are now going to install *Covalent Teradata* dependency:

----
devon yarn add @covalent/core
----

Now that we have all dependencies downloaded, we can check the project's `package.json` file and see if everything has been correctly added (The following dependencies were current at the time of writing. You might see newer versions, which is fine.):

[source, json]
----
  "dependencies": {
    "@angular/animations": "^9.1.2",
    "@angular/cdk": "^9.2.1",
    "@angular/common": "~9.1.1",
    "@angular/compiler": "~9.1.1",
    "@angular/core": "~9.1.1",
    "@angular/forms": "~9.1.1",
    "@angular/material": "^9.2.1",
    "@angular/platform-browser": "~9.1.1",
    "@angular/platform-browser-dynamic": "~9.1.1",
    "@angular/router": "~9.1.1",
    "@covalent/core": "^3.0.1",
    "hammerjs": "^2.0.8",
    "rxjs": "~6.5.4",
    "tslib": "^1.10.0",
    "zone.js": "~0.10.2"
  }
----

Angular Material and Covalent need the following modules to work: `CdkTableModule`, `BrowserAnimationsModule` and *every Covalent and Material Module* used in the application. These modules come from `@angular/material`, `@angular/cdk/table`, `@angular/platform-browser/animations` and `@covalent/core`. In future steps a `CoreModule` will be created. This module will contain the imports of these libraries which will avoid code repetition.

Now let's continue to make some config modifications to have all the styles imported to use Material and Teradata:

1.- Inside `angular/src` we will create a `theme.scss` file to configure the themes of our app. We will use one _primary_ color, one secondary -- called _accent_ -- and another one for _warnings_. Teradata also accepts a foreground and background color. Paste the following content into the file:

[source, scss]
----
@import '~@angular/material/theming';
@import '~@covalent/core/theming/all-theme';

@include mat-core();

$primary: mat-palette($mat-blue, 700);
$accent:  mat-palette($mat-orange, 800);

$warn:    mat-palette($mat-red, 600);

$theme: mat-light-theme($primary, $accent, $warn);

$foreground: map-get($theme, foreground);
$background: map-get($theme, background);

@include angular-material-theme($theme);
@include covalent-theme($theme);
----

2.- Now we have to add these styles to our Angular/CLI config. Go to `angular.json` in the `angular` root folder, then search both of the "styles" arrays (inside build and test) and add `theme.scss` and Covalents `platform.css` to make it look like this:

[source, json]
----
...

  "styles": [
    "src/styles.css",
    "src/theme.scss",
    "node_modules/@covalent/core/common/platform.css"
  ],

...
----

3.- In the same file, the minimified `hammer.min.js` library/script will be added. To do so, paste the following code inside both "scripts" arrays (build and test):

[source,json]
----
...

  "scripts": [
    "node_modules/hammerjs/hammer.min.js"
  ]

...
----

Now we have successfully set up a blank Angular project with Google Material and Covalent Teradata modules. We can continue by adding custom functionality and components to the app.

'''
*Next Chapter*: link:devon4ng-adding-custom-functionality.asciidoc[Customizing a devon4ng Project]