-- This is the SQL script for setting up the DDL for the h2 database
-- In a typical project you would only distinguish between main and test for flyway SQLs
-- However, in this sample application we provde support for multiple databases in parallel
-- You can simply choose the DB of your choice by setting spring.profiles.active=XXX in config/application.properties
-- Assuming that the preconfigured user exists with according credentials using the included SQLs

CREATE SEQUENCE HIBERNATE_SEQUENCE START WITH 1000000;

-- *** Owner ***
CREATE TABLE Owner(
  id BIGINT NOT NULL AUTO_INCREMENT,
  modificationCounter INTEGER NOT NULL,
  name VARCHAR(255),
  email VARCHAR(255),
  password VARCHAR(255),
  CONSTRAINT PK_Owner PRIMARY KEY(id)
 
);
-- *** Queue ***
CREATE TABLE Queue(
  id BIGINT NOT NULL AUTO_INCREMENT,
  modificationCounter INTEGER NOT NULL,
  descriptionText VARCHAR(255),
  minWait BIGINT,
  idImage BIGINT,
  idterms BIGINT,
  idOwner BIGINT,
  CONSTRAINT PK_Queue PRIMARY KEY(id),
  CONSTRAINT FK_Queue_idOwner FOREIGN KEY(idOwner) REFERENCES Owner(id) NOCHECK
);

-- *** Image ***
CREATE TABLE Image (
  id BIGINT NOT NULL AUTO_INCREMENT,
  modificationCounter INTEGER NOT NULL,
  name VARCHAR(255),
  content VARCHAR(2147483647),
  contentType BINARY,
  mimeType VARCHAR(255),
  idQueue BIGINT,
  CONSTRAINT PK_Image PRIMARY KEY(id),
  CONSTRAINT FK_Image_idQueue FOREIGN KEY(idQueue) REFERENCES Queue(id) NOCHECK
);
-- *** Terms ***
CREATE TABLE Terms(
  id BIGINT NOT NULL AUTO_INCREMENT,
  modificationCounter INTEGER NOT NULL,
  description VARCHAR(255),
  idQueue BIGINT,
  CONSTRAINT PK_Terms PRIMARY KEY(id),
  CONSTRAINT FK_Terms_idQueue FOREIGN KEY(idQueue) REFERENCES Queue(id) NOCHECK
);
-- *** User ***
CREATE TABLE User(
  id BIGINT NOT NULL AUTO_INCREMENT,
  modificationCounter INTEGER NOT NULL,
  name VARCHAR(255),
  email VARCHAR(255),
  phone VARCHAR(255),
  url VARCHAR(255),
  consent BOOLEAN,
  token VARCHAR(255),
  validated BOOLEAN,
  creationTime TIMESTAMP,
  identificator VARCHAR(255),
  idQueue BIGINT,
  CONSTRAINT PK_User PRIMARY KEY(id),
  CONSTRAINT FK_User_idQueue FOREIGN KEY(idQueue) REFERENCES Queue(id) NOCHECK
  --CONSTRAINT email UNIQUE
);
-- *** AccessCode ***
CREATE TABLE AccessCode(
  id BIGINT NOT NULL AUTO_INCREMENT,
  modificationCounter INTEGER NOT NULL,
  name VARCHAR(255),
  email VARCHAR(255),
  phone VARCHAR(255),
  code INTEGER,
  priority BOOLEAN,
  identificator VARCHAR(255),
  creationTime TIMESTAMP,
  startTime TIMESTAMP,
  endTime TIMESTAMP,
  estimatedTime TIMESTAMP,
  idQueue BIGINT,
  CONSTRAINT PK_AccessCode PRIMARY KEY(id),
  CONSTRAINT FK_AccessCode_idQueue FOREIGN KEY(idQueue) REFERENCES Queue(id) NOCHECK
);

-- *** RECORD VISTOR INFO CONSENTED ***
CREATE TABLE VisitorInfo(
  id BIGINT NOT NULL AUTO_INCREMENT,
  modificationCounter INTEGER NOT NULL,
  name VARCHAR(255),
  phone VARCHAR(255),
  email VARCHAR(255),
  queue_id BIGINT,
  CONSTRAINT PK_VisitorInfo PRIMARY KEY(id),
  CONSTRAINT FK_VisitorInfo_queue_id FOREIGN KEY(queue_id) REFERENCES Queue(id) NOCHECK
);

-- *** BinaryObject (BLOBs) ***
CREATE TABLE BinaryObject (
  id BIGINT NOT NULL AUTO_INCREMENT,
  modificationCounter INTEGER NOT NULL,
  data BLOB(2147483647),
  size BIGINT NOT NULL,
  mimeType VARCHAR(255),
  PRIMARY KEY (ID)
);

-- *** RevInfo (Commit log for envers audit trail) ***
CREATE TABLE RevInfo(
  id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  timestamp BIGINT NOT NULL,
  userLogin VARCHAR(255)
);